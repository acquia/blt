<project name="setup" default="setup">

  <target name="setup" description="Install dependencies, builds docroot, installs Drupal."
          depends="setup:build, setup:drupal:install, install-alias">
    <echo>For a full list of available Phing targets, run:</echo>
    <echo>blt -l</echo>
    <echo></echo>
  </target>

  <target name="setup:behat" description="Generates tests/behat/local.yml file for executing Behat tests locally.">
    <echo>Attempting to generate tests/behat/local.yml.</echo>
    <copy file="${repo.root}/tests/behat/example.local.yml" tofile="${repo.root}/tests/behat/local.yml" verbose="true">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>

    <exec dir="${repo.root}" command="php -r 'require &quot;./vendor/jakoch/phantomjs-installer/src/PhantomInstaller/PhantomBinary.php&quot;; $pb = new \PhantomInstaller\PhantomBinary(); echo $pb->getBin();'" checkreturn="false" returnProperty="phantomjs.missing" outputProperty="phantomjs.bin"/>
    <if>
      <or>
        <istrue value="${phantomjs.missing}"/>
        <not><available file="${composer.bin}/phantomjs"/></not>
        <not><available file="${phantomjs.bin}"/></not>
      </or>
      <then>
        <exec dir="${repo.root}" command="composer install-phantom" checkreturn="true" logoutput="true" passthru="true" level="info"/>
      </then>
      <else>
        <echo>Found PhantomJS at ${phantomjs.bin}</echo>
      </else>
    </if>

    <property file="${repo.root}/tests/behat/local.yml" prefix="behatConfig"/>
    <if>
      <or>
        <not><available file="${behatConfig.local.extensions.Drupal\DrupalExtension.drupal.drupal_root}"/></not>
        <not><available file="${behatConfig.local.suites.default.paths.features}"/></not>
        <not><available file="${behatConfig.local.suites.default.paths.bootstrap}"/></not>
      </or>
      <then>
        <echo></echo>
        <echo level="error">One or more values in tests/behat/local.yml reference file paths that do not exist on this system.</echo>
        <echo level="error">This is typically related to using a virtual machine.</echo>
        <echo level="error"></echo>
        <echo level="error">Try one of the following solution:</echo>
        <echo level="error">1) Execute the tests on the correct system.</echo>
        <echo level="error">2) Correct the value(s).</echo>
        <echo level="error">3) Remove tests/behat/local.yml so that it can be regenerated automatically from example.local.yml.</echo>
        <echo level="error"></echo>
        <echo level="error">Values are:</echo>
        <echo level="error">drupal_root: ${behatConfig.local.extensions.Drupal\DrupalExtension.drupal.drupal_root}"</echo>
        <echo level="error">features:    ${behatConfig.local.suites.default.paths.features}"</echo>
        <echo level="error">bootstrap:   ${behatConfig.local.suites.default.paths.bootstrap}</echo>
        <echo level="error"></echo>
        <fail>Your Behat configuration is invalid.</fail>
      </then>
    </if>

  </target>

  <!-- This is run when a project is cloned to a new environment. -->
  <target name="setup:build" description="Generates all required files for a full build. E.g., (re)builds docroot, etc."
          depends="setup:git-hooks, setup:drupal:settings, setup:behat, setup:composer:install, frontend">

    <phingcall target="target-hook:invoke">
      <property name="hook-name" value="post-setup-build"/>
    </phingcall>

  </target>

  <target name="setup:composer:clean" description="Wipes all composer managed directories and clears composer cache.">
    <echo>Removing all composer managed dependencies.</echo>
    <delete verbose="true">
      <fileset dir="${repo.root}">
        <include name="docroot/core"/>
        <include name="docroot/libraries"/>
        <include name="docroot/modules/contrib"/>
        <include name="docroot/profiles/contrib"/>
        <include name="docroot/themes/contrib"/>
        <include name="drush/contrib"/>
        <include name="vendor"/>
      </fileset>
    </delete>
    <exec dir="${repo.root}" command="composer clear-cache" logoutput="true" checkreturn="true" level="info" passthru="true"/>
  </target>

  <target name="setup:composer:install" description="Installs project dependencies, including drupal core and contrib.">
    <exec dir="${repo.root}" command="export COMPOSER_EXIT_ON_PATCH_FAILURE=1; composer install --ansi --no-interaction" logoutput="true" checkreturn="true" level="info" passthru="true" />
  </target>

  <target name="setup:settings" depends="setup:drupal:settings, setup:drush:settings, setup:behat" description="Creates settings files for Drupal, drush, and Behat.">
  </target>

  <target name="setup:drupal:settings" description="Create local settings files using default settings files.">
    <echo>Making ${docroot}/sites/default writable.</echo>
    <chmod mode="0755" file="${docroot}/sites/default" failonerror="false" verbose="true" />

    <!-- Ensure that settings.php exists and that it requires BLT settings files. -->
    <if>
      <not><available file="${docroot}/sites/default/settings.php"/></not>
      <then>
        <echo>Generating settings.php from default.settings.php.</echo>
        <copy file="${docroot}/sites/default/default.settings.php" tofile="${docroot}/sites/default/settings.php" verbose="true"/>
      </then>
    </if>
    <echo>Making ${docroot}/sites/default/settings.php writable.</echo>
    <chmod mode="0644" failonerror="false" file="${docroot}/sites/default/settings.php"/>
    <echo>Ensuring that blt.settings.php is required by settings.php</echo>
    <exec dir="${docroot}/sites/default" command="grep vendor/acquia/blt/settings/blt.settings.php settings.php || echo 'require DRUPAL_ROOT . &quot;/../vendor/acquia/blt/settings/blt.settings.php&quot;;' >> settings.php" logoutput="true" checkreturn="true" level="info"/>

    <echo>Generating local settings files.</echo>

    <if>
      <not><available file="${repo.root}/project.local.yml" type="file" /></not>
      <then>
        <copy file="${repo.root}/example.project.local.yml" tofile="${repo.root}/project.local.yml" verbose="true" />
      </then>
    </if>

    <if>
      <not><available file="${docroot}/sites/${multisite.name}/settings/local.settings.php" type="file" /></not>
      <then>
        <if>
          <available file="${docroot}/sites/${multisite.name}/settings/default.local.settings.php" type="file" />
          <then>
            <copy file="${docroot}/sites/${multisite.name}/settings/default.local.settings.php" tofile="${docroot}/sites/${multisite.name}/settings/local.settings.php" verbose="true"/>
          </then>
          <else>
            <copy file="${blt.root}/settings/default.local.settings.php" tofile="${docroot}/sites/${multisite.name}/settings/default.local.settings.php" verbose="true"/>
            <copy file="${blt.root}/settings/default.local.settings.php" tofile="${docroot}/sites/${multisite.name}/settings/local.settings.php" verbose="true" />
          </else>
        </if>
      </then>
    </if>
  </target>

  <target name="setup:drush:settings" description="Create local drush settings files.">
    <if>
      <not><available file="${docroot}/sites/${multisite.name}/local.drushrc.php" type="file" /></not>
      <then>
        <if>
          <available file="${docroot}/sites/${multisite.name}/default.local.drushrc.php" type="file" />
          <then>
            <copy file="${docroot}/sites/${multisite.name}/default.local.drushrc.php" tofile="${docroot}/sites/${multisite.name}/local.drushrc.php" verbose="true" />
          </then>
          <else>
            <copy file="${blt.root}/settings/default.local.drushrc.php" tofile="${docroot}/sites/${multisite.name}/default.local.drushrc.php" verbose="true"/>
            <copy file="${blt.root}/settings/default.local.drushrc.php" tofile="${docroot}/sites/${multisite.name}/local.drushrc.php" verbose="true"/>
          </else>
        </if>
      </then>
    </if>

    <echo>Expanding Phing variables in ${docroot}/sites/${multisite.name}/local.drushrc.php.</echo>

    <reflexive file="${docroot}/sites/${multisite.name}/local.drushrc.php">
      <filterchain>
        <expandproperties />
      </filterchain>
    </reflexive>

    <!-- Re-extract value of $options['uri'] in case it was not yet set. -->
    <!-- @todo Add multisite support. -->
    <phpVariable file="${repo.root}/drush/drushrc.php" variable="options[uri]" outputProperty="local_url" />
  </target>

  <target name="setup:drupal:install"
          description="Installs a specific Drupal site."
          depends="setup:drupal:settings, setup:drush:settings, setup:hash-salt">

    <echo>Printing drush status.</echo>
    <drush command="status"/>

    <echo>Installing Drupal.</echo>
    <drush command="site-install">
      <option name="site-name">"${project.human_name}"</option>
      <option name="site-mail">"${drupal.account.mail}"</option>
      <option name="account-name">"${drupal.account.name}"</option>
      <option name="account-pass">"${drupal.account.password}"</option>
      <option name="account-mail">"${drupal.account.mail}"</option>
      <param>"${project.profile.name}"</param>
      <param>"install_configure_form.update_status_module='array(FALSE,FALSE)'"</param>
    </drush>

    <phingcall target="setup:config-import"/>

    <!-- Set sites directory file permissions. -->
    <echo>Making ${docroot}/sites/default writable.</echo>
    <chmod mode="0755" failonerror="false">
      <fileset dir="${docroot}/sites/default">
        <type type="dir" />
        <exclude name="files/**" />
      </fileset>
    </chmod>
    <chmod mode="0644" failonerror="false">
      <fileset dir="${docroot}/sites/default">
        <type type="file" />
        <exclude name="files/**" />
      </fileset>
    </chmod>

  </target>

  <target name="setup:config-import" description="Import configuration from the config directory.">
    <echo>Importing configuration.</echo>
    <drush command="pm-enable" assume="yes" alias="${drush.alias}">
      <param>config</param>
    </drush>

    <!-- Make db site uuid match site uuid of exported config. -->
    <!--<exec dir="${repo.root}" command="cat ./config/default/system.site.yml | grep uuid | tail -c +7 | head -c 36 | ${drush.cmd} config-set -y system.site uuid -" logoutput="true" checkreturn="true" level="info"/>-->

    <drush command="config-import" assume="yes" alias="${drush.alias}">
      <option name="partial"></option>
      <param>sync</param>
    </drush>
  </target>

  <target name="setup:git-hooks" description="Installs git hooks to local .git/hooks directory from version controlled scripts/git-hooks directory.">
    <echo>Removing ${repo.root}/.git/hooks, if it exists.</echo>
    <!-- Symlink into .git directory. -->
    <delete dir="${repo.root}/.git/hooks" quiet="true" failonerror="false"/>
    <delete file="${repo.root}/.git/hooks" quiet="true" failonerror="false"/>
    <echo>Symlinking ${repo.root}/scripts/git-hooks to ${repo.root}/.git/hooks.</echo>
    <exec dir="${repo.root}/.git" command="ln -snv ../vendor/acquia/blt/scripts/git-hooks hooks" logoutput="true" checkreturn="true" level="info" passthru="true"/>

    <!-- Grant execution permissions. -->
    <echo>Making git hooks executable.</echo>
    <chmod mode="0755">
      <fileset dir="${blt.root}/scripts/git-hooks">
        <exclude name="**/*.sample" />
        <exclude name="**/README.md" />
      </fileset>
    </chmod>
  </target>

  <target name="setup:hash-salt" description="Generates and writes a hash salt to ${repo.root}/salt.txt if one does not exist.">
    <!-- If a hash salt does not exist, generate one. -->
    <echo>Checking for hash salt in ${repo.root}/salt.txt</echo>
    <if>
      <not><available file="${repo.root}/salt.txt"/></not>
      <then>
        <echo>Writing hash salt to ${repo.root}/salt.txt</echo>
        <randomstring propertyName="project.hash_salt" />
        <exec dir="${repo.root}" command="echo '${project.hash_salt}' > salt.txt" logoutput="true" checkreturn="true" level="info"/>
      </then>
      <else>
        <echo>${repo.root}/salt.txt already exists.</echo>
      </else>
    </if>
  </target>

  <target name="setup:update" description="Update current database to reflect the state of the Drupal file system.">
    <!-- Import configuration before executing updates, in case any db updates are dependent on new configs to be imported. -->
    <drush command="config-import" assume="yes" alias="${drush.alias}">
      <option name="partial"></option>
    </drush>
    <!-- Execute db updates. -->
    <drush command="updb" assume="yes" alias="${drush.alias}">
      <option name="entity-updates"></option>
    </drush>
    <!-- Import configuration. -->
    <drush command="config-import" assume="yes" alias="${drush.alias}">
      <option name="partial"></option>
    </drush>
    <!-- Enable features module. -->
    <drush command="en" assume="yes" alias="${drush.alias}">
      <param>features</param>
    </drush>
    <!-- Clear drush caches to register features drush commands. -->
    <drush command="cc" assume="yes" alias="${drush.alias}">
      <param>drush</param>
    </drush>
    <!-- Revert all features. -->
    <drush command="fra" assume="yes" alias="${drush.alias}"/>
    <!-- Rebuild caches. -->
    <drush command="cr" alias="${drush.alias}"/>
  </target>

</project>
