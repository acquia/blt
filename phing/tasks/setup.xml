<project name="setup" default="setup">

  <target name="setup" description="Install dependencies, builds docroot, installs Drupal."
          depends="setup:build, setup:drupal:install, install-alias">
    <echo>For a full list of available Phing targets, run:</echo>
    <echo>blt -l</echo>
    <echo></echo>
  </target>

  <target name="setup:behat" description="Generates tests/behat/local.yml file for executing Behat tests locally.">
    <mkdir dir="${reports.localDir}/behat"/>
    <echo level="verbose">Attempting to generate tests/behat/local.yml.</echo>
    <copy file="${repo.root}/tests/behat/example.local.yml" tofile="${repo.root}/tests/behat/local.yml" verbose="true">
      <filterchain>
        <expandproperties level="verbose" />
      </filterchain>
    </copy>

  </target>

  <!-- setup:composer:install must run prior to setup:drupal:settings to ensure that scaffold files are present. -->
  <target name="setup:build" description="Generates all required files for a full build. E.g., (re)builds docroot, etc."
          depends="setup:git-hooks, setup:composer:install, setup:drupal:settings:site, setup:behat, frontend">

    <if>
      <equals arg1="${simplesamlphp}" arg2="true"/>
        <then>
          <phingcall target="simplesamlphp:build:config"/>
        </then>
    </if>

    <phingcall target="target-hook:invoke">
      <property name="hook-name" value="post-setup-build"/>
    </phingcall>

  </target>

  <target name="setup:composer:clean" description="Wipes all composer managed directories and clears composer cache.">
    <echo>Removing all composer managed dependencies.</echo>
    <delete verbose="true">
      <fileset dir="${repo.root}">
        <include name="docroot/core"/>
        <include name="docroot/libraries"/>
        <include name="docroot/modules/contrib"/>
        <include name="docroot/profiles/contrib"/>
        <include name="docroot/themes/contrib"/>
        <include name="drush/contrib"/>
        <include name="vendor"/>
      </fileset>
    </delete>
    <exec dir="${repo.root}" command="composer clear-cache" logoutput="true" checkreturn="true" level="${blt.exec_level}" passthru="true"/>
  </target>

  <target name="setup:composer:install" description="Installs project dependencies, including drupal core and contrib.">
    <!-- Prefer distributions locally so that the downloaded archives are cached. -->
    <exec dir="${repo.root}" command="export COMPOSER_EXIT_ON_PATCH_FAILURE=1; composer install --ansi --no-interaction" logoutput="true" checkreturn="true" level="${blt.exec_level}" passthru="true" />
  </target>

  <!-- We intentionally do not run setup:behat because we'd like to delay setting values in local.yml until just before they are run. -->
  <target name="setup:settings" depends="setup:drupal:settings:all, setup:drush:settings:all" description="Creates settings files for Drupal and drush.">
  </target>

  <target name="setup:console:settings" description="Initializes Drupal console config.">
    <exec dir="${repo.root}" command="${composer.bin}/drupal init --quiet" logoutput="true" checkreturn="true" level="${blt.exec_level}" passthru="true"/>
  </target>

  <!-- Run Drupal settings setup for each multisite. -->
  <target name="setup:drupal:settings:all" description="Creates local settings files using default settings files for each multisite.">
    <foreach list="${multisite.names}" param="site.name" target="setup:drupal:settings:site"/>
  </target>

  <!-- Wrapper around setup:drupal:settings. -->
  <target name="setup:drupal:settings:site" description="Creates local settings files using default settings files for an individual site.">
    <if>
      <available filepath="${blt.config-dirs.sites}" file="${site.name}.yml" />
      <then>
        <phingcall target="setup:drupal:settings">
          <property file="${blt.config-dirs.sites}/${site.name}.yml" prefix="site" logoutput="false" />
        </phingcall>
      </then>
      <else>
        <phingcall target="setup:drupal:settings" />
      </else>
    </if>
  </target>

  <target name="setup:drupal:settings" description="Does the work of creating local settings files using default settings files for an individual site."
          hidden="true">
    <echo>Making ${docroot}/sites/${site.name} writable</echo>
    <chmod mode="0755" file="${docroot}/sites/${site.name}" failonerror="false"/>

    <!-- Ensure that settings.php exists and that it requires BLT settings files. -->
    <if>
      <not><available file="${docroot}/sites/${site.name}/settings.php"/></not>
      <then>
        <if>
          <not><available file="${docroot}/sites/${site.name}/default.settings.php"/></not>
          <then>
            <echo>Downloading scaffold files so that default.settings.php is available</echo>
            <exec dir="${repo.root}" command="composer drupal-scaffold" logoutput="true" checkreturn="true" level="${blt.exec_level}" passthru="true" />
          </then>
        </if>

        <echo>Generating settings.php from default.settings.php</echo>
        <copy file="${docroot}/sites/${site.name}/default.settings.php" tofile="${docroot}/sites/${site.name}/settings.php"/>
      </then>
    </if>
    <echo>Making ${docroot}/sites/${site.name}/settings.php writable</echo>
    <chmod mode="0644" failonerror="false" file="${docroot}/sites/${site.name}/settings.php"/>
    <echo>Ensuring that blt.settings.php is required by settings.php</echo>
    <exec dir="${docroot}/sites/${site.name}" command="grep vendor/acquia/blt/settings/blt.settings.php settings.php || echo 'require DRUPAL_ROOT . &quot;/../vendor/acquia/blt/settings/blt.settings.php&quot;;' >> settings.php" logoutput="true" checkreturn="true" level="${blt.exec_level}"/>

    <echo>Generating local settings files</echo>

    <if>
      <not><available file="${blt.config-files.local}" type="file" /></not>
      <then>
        <echo>Generating ${blt.config-files.local}</echo>
        <copy file="${blt.config-files.example-local}" tofile="${blt.config-files.local}" verbose="true" />
      </then>
    </if>

    <if>
      <not><available file="${docroot}/sites/${site.name}/settings/local.settings.php" type="file" /></not>
      <then>
        <if>
          <not>
            <available file="${docroot}/sites/${site.name}/settings/default.local.settings.php" type="file" />
          </not>
          <then>
            <echo>Generating ${docroot}/sites/${site.name}/settings/default.local.settings.php</echo>
            <copy file="${blt.root}/settings/default.local.settings.php" tofile="${docroot}/sites/${site.name}/settings/default.local.settings.php" verbose="true"/>
          </then>
        </if>

        <echo>Generating ${docroot}/sites/${site.name}/settings/local.settings.php</echo>
        <copy file="${docroot}/sites/${site.name}/settings/default.local.settings.php" tofile="${docroot}/sites/${site.name}/settings/local.settings.php"/>

      </then>
    </if>
  </target>

  <!-- Run Drush settings setup for each multisite. -->
  <target name="setup:drush:settings:all" description="Creates local drush settings files for each multisite.">
    <foreach list="${multisite.names}" param="site.name" target="setup:drush:settings:site"/>
  </target>

  <!-- Wrapper around setup:drush:settings. -->
  <target name="setup:drush:settings:site" description="Creates local drush settings files for an individual site.">
    <if>
      <available filepath="${blt.config-dirs.sites}" file="${site.name}.yml" />
      <then>
        <phingcall target="setup:drush:settings">
          <property file="${blt.config-dirs.sites}/${site.name}.yml" prefix="site" logoutput="false" />
        </phingcall>
      </then>
      <else>
        <phingcall target="setup:drush:settings">
          <property name="environment" value="local"/>
        </phingcall>
      </else>
    </if>
  </target>

  <target name="setup:drush:settings" description="Does the work of creating local drush settings files for an individual site."
          hidden="true">
    <if>
      <not><available file="${docroot}/sites/${site.name}/local.drushrc.php" type="file" /></not>
      <then>
        <if>
          <not>
            <available file="${docroot}/sites/${site.name}/default.local.drushrc.php" type="file" />
          </not>
          <then>
            <echo>Generating ${docroot}/sites/${site.name}/default.local.drushrc.php</echo>
            <copy file="${blt.root}/settings/default.local.drushrc.php" tofile="${docroot}/sites/${site.name}/default.local.drushrc.php"/>
          </then>
        </if>

        <echo>Generating ${docroot}/sites/${site.name}/local.drushrc.php</echo>
        <copy file="${docroot}/sites/${site.name}/default.local.drushrc.php" tofile="${docroot}/sites/${site.name}/local.drushrc.php"/>
      </then>
    </if>

    <echo level="verbose">Expanding Phing variables in ${docroot}/sites/${site.name}/local.drushrc.php</echo>
    <reflexive file="${docroot}/sites/${site.name}/local.drushrc.php">
      <filterchain>
        <expandproperties level="verbose" />
      </filterchain>
    </reflexive>
  </target>

  <!-- Installs Drupal for each multisite. -->
  <target name="setup:drupal:install:all" description="Installs Drupal on each of the project's multisites.">
    <foreach list="${multisite.names}" param="site.name" target="setup:drupal:install:site"/>
  </target>

  <!-- Wrapper around setup:drupal:install. -->
  <target name="setup:drupal:install:site" description="Installs Drupal on a specific local site.">
    <if>
      <available filepath="${blt.config-dirs.sites}" file="${site.name}.yml" />
      <then>
        <phingcall target="setup:drupal:install">
          <property file="${blt.config-dirs.sites}/${site.name}.yml" prefix="site" logoutput="false" />
        </phingcall>
      </then>
      <else>
        <phingcall target="setup:drupal:install" />
      </else>
    </if>
  </target>

  <!-- Install Drupal on a specific site. -->
  <target name="setup:drupal:install"
          description="Does the work of installing a specific Drupal site."
          depends="setup:drupal:settings:site, setup:drush:settings:site, setup:hash-salt"
          hidden="true">
    <if>
      <istrue value="${drush.verbose}"/>
      <then>
        <echo>Printing drush status</echo>
        <drush command="status"/>
      </then>
    </if>

    <echo>Installing Drupal on ${site.name} in the ${environment} environment...</echo>
    <drush command="site-install" alias="${site.drush.aliases.${environment}}">
      <option name="site-name">"${project.human_name}"</option>
      <option name="site-mail">"${drupal.account.mail}"</option>
      <option name="account-name">"${drupal.account.name}"</option>
      <option name="account-pass">"${drupal.account.password}"</option>
      <option name="account-mail">"${drupal.account.mail}"</option>
      <param>"${project.profile.name}"</param>
      <param>"install_configure_form.update_status_module='array(FALSE,FALSE)'"</param>
    </drush>

    <phingcall target="setup:update"/>

    <!-- Set sites directory file permissions. -->
    <echo level="verbose">Making ${docroot}/sites/${site.name} writable...</echo>
    <chmod mode="0755" failonerror="false">
      <fileset dir="${docroot}/sites/${site.name}">
        <type type="dir" />
        <exclude name="files/**" />
      </fileset>
    </chmod>
    <chmod mode="0644" failonerror="false">
      <fileset dir="${docroot}/sites/${site.name}">
        <type type="file" />
        <exclude name="files/**" />
      </fileset>
    </chmod>

  </target>

  <target name="setup:config-import:site" description="Import configuration from a site's config directory.">
    <if>
      <available filepath="${blt.config-dirs.sites}" file="${site.name}.yml" />
      <then>
        <phingcall target="setup:config-import">
          <property file="${blt.config-dirs.sites}/${site.name}.yml" prefix="site" logoutput="false" />
        </phingcall>
      </then>
      <else>
        <phingcall target="setup:config-import" />
      </else>
    </if>
  </target>

  <target name="setup:config-import" description="Does the work of importing configuration from a site's config directory." hidden="true">
    <echo>Importing configuration for ${site.name}...</echo>
    <drush command="pm-enable" assume="yes" passthru="false">
      <param>config</param>
    </drush>

    <!-- Rebuild caches in case service definitions have changed. -->
    <!-- @see https://www.drupal.org/node/2826466 -->
    <drush command="cr" passthru="false"/>

    <!-- Execute db updates. -->
    <!-- This must happen before features are imported or configuration is imported. -->
    <!-- For instance, if you add a dependency on a new extension to an existing configuration file, you must enable that extension via an update hook before attempting to import the configuration. -->
    <!-- If a db update relies on updated configuration, you should import the necessary configuration file(s) as part of the db update. -->
    <drush command="updb" assume="yes" passthru="false">
      <option name="entity-updates"></option>
    </drush>
    <!-- Import configuration. -->
    <drush command="config-import" assume="yes" passthru="false">
      <option name="partial"></option>
      <param>${cm.core.config-dir}</param>
    </drush>
    <if>
      <isset property="cm.features.bundle"/>
      <then>
        <!-- Enable features module. -->
        <drush command="en" assume="yes" passthru="false">
          <param>features</param>
        </drush>
        <!-- Clear drush caches to register features drush commands. -->
        <drush command="cr" passthru="false">
          <param>drush</param>
        </drush>
        <!-- Revert all features. -->
        <foreach list="${cm.features.bundle}" param="bundle" target="setup:update:features-import:site" />
      </then>
    </if>
    <!-- Rebuild caches. -->
    <drush command="cr" passthru="false"/>
  </target>

  <target name="setup:git-hooks" description="Installs git hooks to local .git/hooks directory from version controlled scripts/git-hooks directory.">
    <exec dir="${repo.root}/.git" command="mkdir -p hooks" logoutput="true" checkreturn="true" level="${blt.exec_level}" passthru="true"/>
    <delete file="${repo.root}/.git/hooks/pre-commit" failonerror="false" quiet="true" verbose="${blt.verbose}"/>
    <delete file="${repo.root}/.git/hooks/commit-msg" failonerror="false" quiet="true" verbose="${blt.verbose}"/>

    <if>
      <not><equals arg1="${git.hooks.pre-commit}" arg2="false"/></not>
      <then>
        <echo level="info">Symlinking ${repo.root}/.git/hooks/pre-commit to ${git.hooks.pre-commit}/pre-commit</echo>
        <exec dir="${repo.root}/.git/hooks" command="ln -snv ${git.hooks.pre-commit}/pre-commit pre-commit" logoutput="true" checkreturn="true" level="${blt.exec_level}" passthru="false"/>
      </then>
    </if>
    <if>
      <not><equals arg1="${git.hooks.commit-msg}" arg2="false"/></not>
      <then>
        <echo level="verbose">Symlinking ${repo.root}/.git/hooks/commit-msg to ${git.hooks.pre-commit}/commit-msg</echo>
        <exec dir="${repo.root}/.git/hooks" command="ln -snv ${git.hooks.commit-msg}/commit-msg commit-msg" logoutput="true" checkreturn="true" level="${blt.exec_level}" passthru="false"/>
      </then>
    </if>

  </target>

  <target name="setup:hash-salt" description="Generates and writes a hash salt to ${repo.root}/salt.txt if one does not exist.">
    <!-- If a hash salt does not exist, generate one. -->
    <echo>Checking for hash salt in ${repo.root}/salt.txt</echo>
    <if>
      <not><available file="${repo.root}/salt.txt"/></not>
      <then>
        <echo>Writing hash salt to ${repo.root}/salt.txt</echo>
        <randomstring propertyName="project.hash_salt" />
        <exec dir="${repo.root}" command="echo '${project.hash_salt}' > salt.txt" logoutput="true" checkreturn="true" level="${blt.exec_level}"/>
      </then>
      <else>
        <echo>${repo.root}/salt.txt already exists.</echo>
      </else>
    </if>
  </target>

  <target name="setup:update" description="Update current database to reflect the state of the Drupal file system." depends="setup:config-import:site">
    <phingcall target="setup:toggle-modules:site"/>
  </target>

  <!-- Perform features import for each multisite. -->
  <target name="setup:update:features-import:all" description="Features import for each multisite on the specified bundle.">
    <foreach list="${multisite.names}" param="site.name" target="setup:update:features-import:site"/>
  </target>

  <target name="setup:update:features-import:site" description="Features import for a site on the specified bundle.">
    <if>
      <available filepath="${blt.config-dirs.sites}" file="${site.name}.yml" />
      <then>
        <phingcall target="setup:update:features-import">
          <property file="${blt.config-dirs.sites}/${site.name}.yml" prefix="site" logoutput="false" />
        </phingcall>
      </then>
      <else>
        <phingcall target="setup:update:features-import" />
      </else>
    </if>
  </target>

  <target name="setup:update:features-import" description="Does the work of a features import for a site on the specified bundle."
          hidden="true">
    <drush command="fra" assume="yes" passthru="false">
      <option name="bundle">${bundle}</option>
    </drush>
    <if>
      <equals arg1="${cm.features.no-overrides}" arg2="true"/>
      <then>
        <exec command="${drush.bin} @${drush.alias} fl --bundle=${bundle} | grep -Ei '(changed|conflicts|added)( *)$'" outputProperty="features.overrides"/>
        <if>
          <istrue value="${features.overrides}"/>
          <then>
            <fail>A feature in the ${bundle} bundle is overridden. You must re-export this feature to incorporate the changes.</fail>
          </then>
        </if>
      </then>
    </if>
  </target>

  <!-- Wrapper around setup:toggle-modules. -->
  <target name="setup:toggle-modules:site" description="Enables and uninstalls specified modules.">
    <if>
      <available filepath="${blt.config-dirs.sites}" file="${site.name}.yml" />
      <then>
        <phingcall target="setup:toggle-modules">
          <property file="${blt.config-dirs.sites}/${site.name}.yml" prefix="site" logoutput="false" />
        </phingcall>
      </then>
      <else>
        <phingcall target="setup:toggle-modules" />
      </else>
    </if>
  </target>

  <target name="setup:toggle-modules" description="Does the work of enabling and uninstalling specified modules."
          hidden="true">
    <echo>Toggling modules on ${site.name}...</echo>
    <if>
      <isset property="environment"/>
      <then>
        <if>
          <isset property="modules.${environment}.enable"/>
          <then>
            <drush command="pm-enable" assume="yes" passthru="false">
              <param>${modules.${environment}.enable}</param>
              <option name="skip"></option>
            </drush>
          </then>
          <else>
            <echo>modules.${environment}.enable is not set.</echo>
          </else>
        </if>

        <if>
          <isset property="modules.${environment}.uninstall"/>
          <then>
            <drush command="pm-uninstall" assume="yes" passthru="false">
              <param>${modules.${environment}.uninstall}</param>
            </drush>
          </then>
          <else>
            <echo>modules.${environment}.uninstall is not set.</echo>
          </else>
        </if>
      </then>
      <else>
        <echo>environment property is not set.</echo>
      </else>
    </if>
  </target>

</project>
