<project name="vm" default="vm">

  <target name="vm" depends="vm:requirements" description="Installs requirements, initializes, and boots DrupalVM.">

    <!--Initialize DrupalVM for this project if necessary.-->
    <if>
      <not><available file="${repo.root}/Vagrantfile"/></not>
      <then>
        <phingcall target="vm:project:init"/>
      </then>
    </if>

    <!--Initialize DrupalVM for this machine if necessary.-->
    <if>
      <not><equals arg1="${drush.aliases.local}" arg2="${project.machine_name}.local"/></not>
      <then>
        <phingcall target="vm:local:init"/>
      </then>
    </if>

    <phingcall target="vm:up"/>
  </target>


  <target name="vm:local:init" depends="setup:drupal:settings" description="Initializes DrupalVM for this machine." hidden="true">
    <!-- Sadly this wipes out comments in the file. -->
    <echo>Updating project.local.yml.</echo>
    <exec dir="${repo.root}" command="${composer.bin}/drupal yaml:update:value ${repo.root}/project.local.yml drush.default_alias '${project.machine_name}.local'" logoutput="true" checkreturn="true" level="info" passthru="true"/>
    <exec dir="${repo.root}" command="${composer.bin}/drupal yaml:update:value ${repo.root}/project.local.yml drush.aliases.local '${project.machine_name}.local'" logoutput="true" checkreturn="true" level="info" passthru="true"/>

    <echo>project.local.yml has been modified.</echo>
    <echo>drush.default_alias has been set to ${project.machine_name}.local'</echo>
    <echo>drush.aliases.local has been set to ${project.machine_name}.local'</echo>
  </target>

  <target name="vm:project:init" description="Initializes Drupal VM for this project." hidden="true">
    <echo>BLT support for Drupal VM is EXPERIMENTAL. Not all BLT features currently work with Drupal VM. </echo>
    <echo>Creating a drush alias for the new VM.</echo>
    <exec dir="${repo.root}" command="cat ${blt.root}/scripts/drupal-vm/drupal-vm.aliases.drushrc.php >> ${repo.root}/drush/site-aliases/aliases.drushrc.php" logoutput="true" checkreturn="true" level="info"/>
    <reflexive>
      <fileset dir="${repo.root}">
        <include name="drush/site-aliases/aliases.drushrc.php" />
      </fileset>
      <filterchain>
        <expandproperties />
      </filterchain>
    </reflexive>

    <echo>Creating a config.yml file for Drupal VM.</echo>
    <mkdir dir="${repo.root}/box" mode="755"/>
    <copy file="${blt.root}/scripts/drupal-vm/config.yml" tofile="${repo.root}/box/config.yml" verbose="true">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>

    <echo>Creating a Vagrantfile.</echo>
    <copy file="${blt.root}/scripts/drupal-vm/Vagrantfile" todir="${repo.root}" verbose="true"/>

    <echo>Adding geerlingguy/drupal-vm to composer dev dependencies.</echo>
    <exec dir="${repo.root}" command="composer require --dev geerlingguy/drupal-vm:~3.1" logoutput="true" checkreturn="true" level="info" passthru="true"/>

    <echo></echo>
    <echo>A new "box" directory and a Vagrantfile have been added to ${repo.root}</echo>
    <echo></echo>
    <echo>To customize the VM, follow the Quick Start Guide in Drupal VM's README:</echo>
    <echo>https://github.com/geerlingguy/drupal-vm#quick-start-guide</echo>
    <echo></echo>
    <echo>To run drush commands against the VM, use the @${drush.aliases.local} alias.</echo>
    <echo>You may pin yourself to this alias using "drush use @${drush.aliases.local}"</echo>
  </target>

  <target name="vm:requirements" description="Checks and conditionally installs DrupalVM requirements." hidden="true">

    <!-- Check for VirtualBox. -->
    <exec dir="${repo.root}" command="command -v VirtualBox >/dev/null 2>&amp;1" returnProperty="virtualbox.missing" logoutput="true" checkreturn="false"/>
    <if>
      <istrue value="${virtualbox.missing}"/>
      <then>

        <if>
          <!-- Mac OSX only. -->
          <equals arg1="${os.name}" arg2="Darwin"/>
          <then>
            <echo>VirtualBox is missing!</echo>
            <phingcall target="vm:requirements:darwin:virtualbox"/>
          </then>
          <elseif>
            <equals arg1="${os.name}" arg2="Linux"/>
            <then>
              <phingcall target="vm:requirements:linux:virtualbox"/>
            </then>
          </elseif>
          <else>
            <fail message="Please install VirtualBox and retry."/>
          </else>
        </if>

      </then>
    </if>


    <!-- Check for vagrant. -->
    <exec dir="${repo.root}" command="command -v vagrant >/dev/null 2>&amp;1" returnProperty="vagrant.missing" logoutput="true" checkreturn="false"/>
    <if>
      <istrue value="${vagrant.missing}"/>
      <then>
        <echo>Vagrant is not installed!</echo>

        <if>
          <!-- Mac OSX only. -->
          <equals arg1="${os.name}" arg2="Darwin"/>
          <then>
            <phingcall target="vm:requirements:darwin:vagrant"/>
          </then>
          <elseif>
            <equals arg1="${os.name}" arg2="Linux"/>
            <then>
              <phingcall target="vm:requirements:linux:vagrant"/>
            </then>
          </elseif>
          <else>
            <fail message="Please install Vagrant and retry."/>
          </else>
        </if>

      </then>
    </if>

    <exec dir="${repo.root}" command="vagrant plugin list | grep vagrant-hostsupdater" returnProperty="vagrant.hostsupdater.missing"/>
    <!--Check for hostsupdater plugin for Vagrant-->
    <if>
      <istrue value="${vagrant.hostsupdater.missing}"/>
      <then>
        <echo>The vagrant-hostsupdater plugin is not installed! Attempting to install it...</echo>
        <exec command="vagrant plugin install vagrant-hostsupdater" logoutput="true" checkreturn="true" level="info" passthru="true"/>
      </then>
    </if>

  </target>

  <target name="vm:requirements:darwin:brew" description="Installs homebrew for Mac OSX." hidden="true">
    <exec dir="${repo.root}" command="command -v brew >/dev/null 2>&amp;1" returnProperty="brew.missing" logoutput="true" checkreturn="false"/>
    <if>
      <istrue value="${brew.missing}"/>
      <then>
        <echo>You don't have homebrew! While not strictly necessary, homebrew is highly recommended for managing Mac OSX packages.</echo>
        <exec command="/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;" logoutput="true" checkreturn="true" level="info" passthru="true" />
      </then>
    </if>
  </target>

  <target name="vm:requirements:darwin:virtualbox" depends="vm:requirements:darwin:brew" hidden="true">
    <exec command="brew cask install virtualbox" logoutput="true" checkreturn="true" level="info" passthru="true"/>
  </target>

  <target name="vm:requirements:darwin:vagrant" depends="vm:requirements:darwin:brew" hidden="true">
    <exec command="brew cask install vagrant" logoutput="true" checkreturn="true" level="info" passthru="true"/>
  </target>

  <!--@todo Verify that apt is the package manager, not yum.-->
  <target name="vm:requirements:linux:virtualbox" depends="vm:requirements:darwin:brew" hidden="true">
    <exec command="apt-get install virtualbox" logoutput="true" checkreturn="true" level="info" passthru="true"/>
  </target>

  <!--@todo Verify that apt is the package manager, not yum.-->
  <target name="vm:requirements:linux:vagrant" depends="vm:requirements:darwin:brew" hidden="true">
    <exec command="apt-get install vagrant" logoutput="true" checkreturn="true" level="info" passthru="true"/>
  </target>

  <target name="vm:up" hidden="true">
    <exec command="vagrant up" logoutput="true" checkreturn="true" level="info" passthru="true" />
  </target>

</project>
