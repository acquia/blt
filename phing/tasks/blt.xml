<project name="blt" default="update">
  <target name="create-project">
    <exec dir="${repo.root}" command="git init" logoutput="true" checkreturn="true" level="info" passthru="true"/>
    <echo>Updating composer dependencies, this make take a while...</echo>
    <exec dir="${repo.root}" command="export COMPOSER_PROCESS_TIMEOUT=600; composer update --no-interaction" logoutput="true" checkreturn="true" level="info" passthru="true"/>
    <exec dir="${repo.root}" command="rm LICENSE.txt" logoutput="true" checkreturn="true" level="info" passthru="true"/>
    <exec dir="${repo.root}" command="git add -A" logoutput="true" checkreturn="true" level="info" passthru="true"/>
    <exec dir="${repo.root}" command="git commit -m 'Initial commit.'" logoutput="true" checkreturn="true" level="info" passthru="true"/>
  </target>

  <target name="doctor" description="Inspects your local blt configuration for possible issues.">
    <drush command="blt-doctor" verbose="false" uri="">
      <option name="include">${blt.root}/drush</option>
    </drush>
  </target>

  <target name="blt:rsync-template">
    <echo>Copying files from BLT's template into your project.</echo>
    <!-- @todo Do not overwrite structured or executable files. Instead, update them intelligently settings.php, drush.wrapper etc. -->
    <exec dir="${repo.root}" command="rsync -a --no-g ${blt.root}/template/ ${repo.root}/ --exclude-from=${blt.update.ignore-existing-file}" logoutput="true" checkreturn="true" level="info" passthru="true"/>

    <!--Rsync files without overwriting existing-->
    <exec dir="${repo.root}" command="rsync -a --no-g ${blt.root}/template/ ${repo.root}/ --include-from=${blt.update.ignore-existing-file} --ignore-existing" logoutput="true" checkreturn="true" level="info" passthru="true"/>
  </target>

  <target name="update" depends="blt:rsync-template, blt:update-composer, blt:update-yml, setup:drupal:settings">
    <phingcall target="install-alias">
      <property name="create_alias" value="true"/>
    </phingcall>

    <echo>Some of your customized files may have been modified.</echo>
    <echo>Please review changes with "git diff".</echo>
    <echo>If your composer.json was modified, you need to run "composer update".</echo>
    <echo>Commit changes, or use "git add -p [filename]" to select which changes should be committed to each file.</echo>
    <echo></echo>
    <echo>To remove deprecated BLT files, run "blt cleanup".</echo>
  </target>

  <target name="blt:update-composer" description="Updates project composer.json with a subset of new key value pairs from upstream. This WILL overwrite existing values.">
    <!--@todo Output different message if composer.json does not exist.-->
    <echo>Merging BLT's composer.json template with your project's composer.json.</echo>
    <echo>This MAY overwrite some existing values.</echo>
    <!--Values in the project's existing composer.json file will be overwritten.-->
    <exec dir="${repo.root}" command="${repo.root}/vendor/bin/blt-console composer:munge ${repo.root}/composer.json ${blt.root}/template/composer.json > ${repo.root}/composer.json.tmp" logoutput="true" checkreturn="true" level="info"/>
    <!--@todo Find out why can't we just redirect output directly back to composer.json. -->
    <exec dir="${repo.root}" command="mv ${repo.root}/composer.json.tmp ${repo.root}/composer.json" logoutput="true" checkreturn="true" level="info" passthru="true"/>
    <echo>If your composer.json was modified, you need to run "composer update".</echo>
  </target>

  <target name="blt:update-yml" description="Updates project BLT .yml files with new key value pairs from upstream. This WILL NOT overwrite existing values.">
    <!--@todo Output different message if project.yml does not exist-->
    <echo>Merging BLT's project.yml template with your project's project.yml.</echo>
    <echo>This WILL NOT overwrite existing values.</echo>
    <!--Values in the project's existing project.yml file will be preserved and not overridden.-->
    <exec dir="${repo.root}" command="${repo.root}/vendor/bin/blt-console yaml:munge ${blt.root}/template/project.yml ${repo.root}/project.yml > ${repo.root}/project.yml.tmp" logoutput="true" checkreturn="true" level="info"/>
    <!--@todo Find out why can't we just redirect output directly back to project.yml. -->
    <exec dir="${repo.root}" command="mv ${repo.root}/project.yml.tmp ${repo.root}/project.yml" logoutput="true" checkreturn="true" level="info" passthru="true"/>
    <echo>project.yml has been modified.</echo>
  </target>

  <target name="cleanup" description="Removes deprecated BLT files and directories.">
    <exec dir="${repo.root}" command="${blt.root}/scripts/blt/remove-deprecated.sh" logoutput="true" checkreturn="true" level="info" passthru="true" />
  </target>

  <target name="install-alias" description="Installs the BLT alias for command line usage.">
    <if>
      <not><equals arg1="${create_alias}" arg2="false"/></not>
      <then>
        <if>
          <equals arg1="${create_alias}" arg2="true"/>
          <then>
            <exec dir="${blt.root}/scripts/blt" command="./install-alias.sh -y" logoutput="true" level="info" passthru="true"/>
          </then>
          <else>
            <exec dir="${blt.root}/scripts/blt" command="./install-alias.sh" logoutput="true" level="info" passthru="true"/>
          </else>
        </if>
      </then>
    </if>
  </target>
</project>
