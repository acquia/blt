<project name="validate" default="validate">

  <target name="validate" description="Runs all code validation targets."
          depends="validate:all"/>

  <!-- Run all validation targets. -->
  <target name="validate:all" description="Runs all code validation targets."
          depends="validate:composer, validate:lint, validate:phpcs, validate:twig, validate:yaml"
          hidden="true" />

  <!-- Verify that composer json and lock files are in sync. -->
  <target name="validate:composer" description="Validate composer files.">
    <exec dir="${repo.root}" command="composer validate --no-check-all --ansi" logoutput="true" level="${blt.exec_level}" passthru="true" returnProperty="composer.invalid"/>
    <if>
      <istrue value="${composer.invalid}"/>
      <then>
        <echo level="warning">composer.lock is invalid.</echo>
        <echo level="warning">If this is simply a matter of the lock file being out of date, you may attempt to use `composer update --lock` to quickly generate a new hash in your lock file.</echo>
        <echo level="warning">Otherwise, `composer update` is likely necessary.</echo>

        <fail>composer.lock is invalid.</fail>
      </then>
    </if>
  </target>

  <!-- Run linter against all php files in repository. -->
  <target name="validate:lint" description="Runs a PHP Lint against all code.">
    <phplint>
      <fileset refid="files.php.custom.modules"/>
      <fileset refid="files.php.custom.themes"/>
      <fileset refid="files.php.tests"/>
    </phplint>
  </target>

  <!-- Run linter against all yaml files in repository. -->
  <target name="validate:yaml" description="Runs a PHP Lint against all code.">
    <yamlLint executable="${composer.bin}/yaml-cli" haltonerror="true">
      <fileset refid="files.yaml.cm"/>
      <fileset refid="files.yaml.custom"/>
    </yamlLint>
  </target>

  <!-- Run code sniffer against specific files. -->
  <target name="validate:phpcs:files" description="" hidden="true">
    <fail unless="files" message="Missing files parameter."/>
    <property name="phpcs.ruleset" value="${repo.root}/vendor/drupal/coder/coder_sniffer/Drupal/ruleset.xml"/>

    <filterFileListByFileSet fileList="${files}" root="${repo.root}" returnProperty="filteredFileList">
      <fileset refid="files.php.custom.modules"/>
      <fileset refid="files.php.custom.themes"/>
      <fileset refid="files.php.tests"/>
    </filterFileListByFileSet>

    <if>
      <istrue value="${filteredFileList}"/>
      <then>
        <!--@todo Pass an entire fileset to PHPCS rather than looping over a list. -->
        <foreach list="${filteredFileList}" target="validate:phpcs:file" param="file"/>
      </then>
    </if>
  </target>

  <target name="validate:phpcs:file" description="Runs PHP Code Sniffer against a specific file." hidden="true">
    <fail unless="file" message="Missing file parameter."/>
    <property name="phpcs.ruleset" value="${repo.root}/vendor/drupal/coder/coder_sniffer/Drupal/ruleset.xml"/>
    <phpcodesniffer
        file="${file}"
        standard="${phpcs.ruleset}"
        showSniffs="false"
        showWarnings="true"
        haltonerror="true"
        haltonwarning="true"
        verbosity="${blt.verbose}"/>
  </target>

  <!-- Run code sniffer against all custom code. -->
  <target name="validate:phpcs" description="Runs PHP Code Sniffer against only custom modules.">
    <property name="phpcs.ruleset" value="${repo.root}/vendor/drupal/coder/coder_sniffer/Drupal/ruleset.xml"/>
    <foreach list="${phpcs.filesets}" target="validate:phpcs:fileset" param="fileset_refid"/>
  </target>

  <target name="validate:phpcs:fileset" description="Runs PHP Code Sniffer against only custom modules." hidden="true">
    <echo>Code sniffing ${fileset_refid}</echo>
    <!-- Sniff tests. -->
    <phpcodesniffer
      standard="${phpcs.ruleset}"
      showSniffs="false"
      showWarnings="true"
      haltonerror="${phpcs.haltonerror}"
      haltonwarning="${phpcs.haltonwarning}">
      <fileset refid="${fileset_refid}"/>
      <formatter type="full" usefile="false"/>
    </phpcodesniffer>
  </target>

  <target name="validate:twig" description="Validates twig syntax on custom twig files.">
    <echo>Validating twig syntax for all custom modules and themes...</echo>
    <exec dir="${repo.root}" command="${composer.bin}/twig-lint lint --only-print-errors ${docroot}/modules/custom --exclude '(.+\/)?node_modules\/.*\.twig'" logoutput="true" checkreturn="true" passthru="true"  level="${blt.exec_level}" />
    <exec dir="${repo.root}" command="${composer.bin}/twig-lint lint --only-print-errors ${docroot}/themes/custom --exclude '(.+\/)?node_modules\/.*\.twig'" logoutput="true" checkreturn="true" passthru="true"  level="${blt.exec_level}" />
  </target>

</project>
