<project name="properties" default="build">

  <!-- Define the repo root as a property, and resolve to an absolute file path. -->
  <!-- We assume that Phing is running in vendor/acquia/blt/phing of a parent project. -->
  <property name="repo.root.relative" value="${phing.dir}/../../../.." logoutput="false"/>
  <resolvepath propertyName="repo.root" file="${repo.root.relative}"/>

  <property name="blt.root.relative" value="${phing.dir}/.." logoutput="false"/>
  <resolvepath propertyName="blt.root" file="${blt.root.relative}"/>

  <!-- Load file directory and binary locations. -->
  <property file="${phing.dir}/build.yml" override="true" logoutput="false"/>

  <!-- Load the root project.yml file for this project. -->
  <if>
    <available file="${blt.config-files.project}" type="file"/>
    <then>
      <property file="${blt.config-files.project}" override="true" logoutput="${blt.verbose}"/>
    </then>
  </if>

  <!-- Load the local project.local.yml file for this project. -->
  <!--@todo Change this so that it is only loaded for local:* targets. -->
  <if>
    <available file="${blt.config-files.local}" type="file" property="local.properties"/>
    <then>
      <property file="${blt.config-files.local}" override="true" logoutput="${blt.verbose}"/>
    </then>
  </if>

  <!--Get version information. -->
  <if>
    <not><available file="${blt.config-files.schema-version}"/></not>
    <then>
      <!-- If no schema version exists, assume 8.5.2, which is last release before this file was introduced. -->
      <exec dir="${repo.root}" command="mkdir -p blt" checkreturn="true" logoutput="true" passthru="false" level="${blt.exec_level}"/>
      <exec dir="${repo.root}" command="echo '8.5.2' >> ${blt.config-files.schema-version}" checkreturn="true" logoutput="true" passthru="false" level="${blt.exec_level}"/>
    </then>
  </if>
  <exec dir="${repo.root}" command="cat ${blt.config-files.schema-version}" outputProperty="blt.schema-version" checkreturn="true" logoutput="false" level="${blt.exec_level}"/>
  <!-- Send errors to /dev/null, for environments like ACE without composer. -->
  <exec dir="${repo.root}" command="composer info acquia/blt --no-ansi 2> /dev/null | grep versions | awk '{print $4}'" outputProperty="blt.version" logoutput="false" checkreturn="true" level="${blt.exec_level}" />

  <!-- Set the ${verbosity} variable.  -->
  <verbosityTask returnProperty="verbosity"/>
  <if>
    <or>
      <equals arg1="${verbosity}" arg2="debug"/>
      <equals arg1="${verbosity}" arg2="verbose"/>
    </or>
    <then>
      <!-- blt.verbose is used to toggle the verbosity on other tasks, such as Drush and Behat. -->
      <property name="blt.verbose" value="true"/>
    </then>
  </if>

  <!-- Set the default site to operate against. -->
  <property name="site.name" value="default" override="false"/>

  <!-- Load multisite-specific overrides. -->
  <if>
    <available file="${blt.config-dirs.sites}"/>
    <then>
      <!-- Build the site list from *.yml files in the blt/sites directory. -->
      <exec dir="${blt.config-dirs.sites}" command="ls *.yml | tr -d '\n' | sed s/\.yml/,/g" outputProperty="multisite.names"/>
      <!-- Strip out the trailing comma. -->
      <propertyregex subject="${multisite.names}" pattern=",$" replace="" property="multisite.names" override="true"/>
      <!-- Load default site properties if overrides are specified. -->
      <if>
        <available filepath="${blt.config-dirs.sites}" file="${site.name}.yml" />
        <then>
          <property file="${blt.config-dirs.sites}/${site.name}.yml" prefix="site" logoutput="false"/>
        </then>
      </if>
    </then>
  </if>

  <!-- Ensure at least the default site is listed in the list of sites when no site(s) specific config is provided. -->
  <property name="multisite.names" value="${site.name}" override="false"/>

  <!-- Set site aliases if not already set by ${site.name}.yml. -->
  <property name="site.drush.aliases.local" value="${drush.aliases.local}" override="false"/>
  <property name="site.drush.aliases.remote" value="${drush.aliases.remote}" override="false"/>
  <property name="site.drush.aliases.ci" value="${drush.aliases.ci}" override="false"/>

  <!-- Set site uris if not already set by ${site.name}.yml. -->
  <property name="site.uri.local" value="${project.local.uri}" override="false"/>
  <property name="site.uri.ci" value="${project.ci.uri}" override="false"/>

  <echo level="verbose">Executing commands against multisite "${site.name}"</echo>

  <!-- If no environment is set, assume we're working locally. -->
  <property name="environment" value="local" override="false" logoutput="false"/>

  <!-- Setup default drush alias. -->
  <property name="drush.alias" value="${drush.default_alias}" override="false" logoutput="false"/>

  <if>
    <equals arg1="${env.USER}" arg2="vagrant"/>
    <then>
      <echo level="verbose">You are running commands inside of a vagrant machine. Setting drush alias to @self.</echo>
      <property name="drush.alias" value="self" override="true"/>
    </then>
  </if>

  <target name="echo-property" description="Echoes the value of a Phing property." hidden="true">
    <fail unless="property.name" message="property.name must be set!"/>
    <echo>${property.name}</echo>
    <if>
      <isset property="${property.name}"/>
      <then>
        <echo level="warning">${${property.name}}</echo>
      </then>
    </if>
  </target>

  <target name="echo-properties" description="Echoes the value of all Phing properties." hidden="true">
    <echoproperties/>
  </target>

</project>
