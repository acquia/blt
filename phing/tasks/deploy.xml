<project name="deploy" default="deploy">

  <target name="deploy" description="Builds separate artifact and pushes to git.remotes defined project.yml.">

    <!-- Check working tree state. -->
    <exec dir="${repo.root}" command="status=$(git status --porcelain); echo ${#status};"
          outputProperty="git.status.length" checkreturn="true"/>
    <if>
      <!-- Length will be a non-zero value if there are uncommitted changes. -->
      <not><equals arg1="${git.status.length}" arg2="0"/></not>
      <then>
        <if>
          <!-- Warn that there are uncommitted changes in this deploy. -->
          <isfalse value="${deploy.git.failOnDirty}"/>
          <then>
            <echo level="warning">Deploy is being run with uncommitted changes.</echo>
          </then>
          <!-- Fail the deploy, the working tree must be clean. -->
          <else>
            <fail>There are uncommitted changes, commit or stash these changes before deploying.</fail>
          </else>
        </if>
      </then>
    </if>

    <!-- Build some defaults -->
    <exec command="git rev-parse --abbrev-ref HEAD" dir="${repo.root}" outputProperty="branch.current"/>
    <exec command="git log --oneline -1" dir="${repo.root}" outputProperty="deploy.commitMsg.last"/>
    <!-- Strip out the SHA-1 checksum -->
    <propertyregex property="deploy.commitMsg.default" subject="${deploy.commitMsg.last}" pattern="^[a-f0-9]+\s(.*)$" replace="$1"/>

    <!--If deploy.branch or deploy.commitMsg have been specified, we assume that deployment is being executed -->
    <!--non-interactively and we disable prompts.-->
    <property name="deploy.prompt" value="true" />
    <if>
      <or>
        <isset property="deploy.branch"/>
        <isset property="deploy.commitMsg"/>
        <isset property="deploy.tag"/>
      </or>
      <then>
        <property name="deploy.prompt" value="false" override="true" />
      </then>
    </if>

    <if>
      <istrue value="${deploy.prompt}"/>
      <then>
        <propertyprompt propertyName="deploy.commitMsg" useExistingValue="true"
                        promptText="Enter a valid commit message (defaults to last commit message)"
                        promptCharacter=":"
                        defaultValue="${deploy.commitMsg.default}"/>

        <if>
          <not><isset property="deploy.tag"/></not>
          <then>
            <propertyprompt promptText="Would you like to create a tag? Typically, this is only done if you have currently have a tag checked out on your source repository. [y/n]"
                            useExistingValue="true"
                            propertyName="deploy.tag.create"
                            defaultValue="n"/>

            <if>
              <equals arg1="${deploy.tag.create}" arg2="y"/>
              <then>
                <propertyprompt propertyName="deploy.tag" useExistingValue="true"
                                promptText="Enter the name of the tag to create."
                                promptCharacter=":"
                                defaultValue=""/>
                <if>
                  <equals arg1="${deploy.tag}" arg2=""/>
                  <then>
                    <fail message="You must enter a tag name."/>
                  </then>
                </if>
              </then>
              <else>
                <propertyprompt propertyName="deploy.branch" useExistingValue="true"
                                promptText="Enter a deploy branch (defaults to [current branch]-build)"
                                promptCharacter=":"
                                defaultValue="${branch.current}-build"/>
              </else>
            </if>
          </then>
        </if>

      </then>
    </if>
    <if>
      <isset property="deploy.tag"/>
      <then>
        <!-- If we are building a tag, then we assume that we will NOT be pushing the build branch from which the tag is created. -->
        <!-- We give the temporary build branch a name of ${branch.current}-build-temp. -->
        <property name="deploy.branch" value="${branch.current}-build-temp" />
      </then>
    </if>

    <fail unless="deploy.branch" message="The required parameter deploy.branch is not set."/>
    <fail unless="deploy.commitMsg" message="The required parameter deploy.commitMsg is not set."/>

    <!-- Delete the existing deploy directory and re-initialize as an empty git repository. -->
    <phingcall target="deploy:prepare-dir"/>

    <!-- Add remotes and fetch upstream refs. Checkout local branch tracking
     tracking upstream branch, if it exists. Otherwise create new branch
     locally. -->
    <phingcall target="deploy:add-remotes"/>

    <!-- Build artifact and commit locally. -->
    <phingcall target="deploy:build"/>

    <!--Commit artifact. -->
    <phingcall target="deploy:commit"/>

    <!-- Commit tag if present -->
    <if>
      <isset property="deploy.tag"/>
      <then>
        <phingcall target="deploy:tag"/>
      </then>
    </if>

    <!-- Push up changes to remotes if this is not a dry run.-->
    <if>
      <not><isset property="deploy.dryRun"/></not>
      <then>
        <phingcall target="deploy:push-all"/>
      </then>
    </if>

  </target>

  <target name="deploy:remote:add" description="Adds a git remote and checks out deploy branch from upstream." hidden="true">
    <echo message="Fetching from git remote ${deploy.remote}"/>

    <!-- Generate an md5 sum of the remote URL to use as remote name. -->
    <exec command="echo ${deploy.remote} | openssl md5 | cut -d' ' -f 2" outputProperty="remoteName" checkreturn="true" level="${blt.exec_level}"/>
    <exec command="git remote add ${remoteName} ${deploy.remote}" dir="${deploy.dir}" logoutput="true" checkreturn="true" level="${blt.exec_level}" passthru="true"/>

    <!-- @todo Only call this for the first remote. -->
    <phingcall target="deploy:remote:pull" />
  </target>

  <target name="deploy:remote:pull" description="Checks out deploy branch from upstream remote." hidden="true">
    <!-- Hide output in case branch does not exist on remote. Would emit misleading "fatal" error message. -->
    <exec command="git fetch ${remoteName} ${deploy.branch}" dir="${deploy.dir}" logoutput="false" level="${blt.exec_level}" passthru="true"/>

    <!-- Create the new branch, "[source-branch-name]-build". -->
    <!-- We intentionally use checkreturn="false" in case the branch already exists. `git checkout -B` does not seem to work as advertised -->
    <exec command="git checkout -b ${deploy.branch}" dir="${deploy.dir}" logoutput="true" checkreturn="false" level="${blt.exec_level}" passthru="true"/>

    <!-- Pull the latest updates (if available). -->
    <exec command="git merge ${remoteName}/${deploy.branch}" dir="${deploy.dir}" logoutput="true" passthru="true"/>
  </target>

  <target name="deploy:add-remotes" description="Add remotes and fetch upstream refs." hidden="true">
    <foreach list="${git.remotes}" param="deploy.remote" target="deploy:remote:add"/>
  </target>

  <target name="deploy:build" description="Generates a deploy-ready build in deploy.dir."
          depends="frontend, setup:hash-salt, deploy:copy, deploy:composer:install, deploy:id, deploy:sanitize">
    <!--Allow custom commands to be run before commit.-->
    <phingcall target="target-hook:invoke">
      <property name="hook-name" value="post-deploy-build"/>
    </phingcall>

    <if>
      <equals arg1="${simplesamlphp}" arg2="true"/>
      <then>
        <phingcall target="simplesamlphp:deploy:config"/>
      </then>
    </if>
  </target>

  <target name="deploy:id" description="Writes deployment id information to artifact.">
    <if>
      <isset property="deploy.tag"/>
      <then>
        <!-- Write tag name for the benefit of environments like ACE that can't access it. -->
        <exec dir="${deploy.dir}" command="echo '${deploy.tag}' > deployment_identifier" logoutput="true" checkreturn="true" level="${blt.exec_level}"/>
      </then>
    </if>
  </target>

  <target name="deploy:commit" hidden="true">
    <!-- We make these commands quiet because they can cause the output to be so long that Travis CI stops logging. -->
    <exec command="git add -A" dir="${deploy.dir}" logoutput="true" checkreturn="true" level="${blt.exec_level}" passthru="true"/>
    <exec executable="git" dir="${deploy.dir}" logoutput="true" checkreturn="true" level="${blt.exec_level}" passthru="true" escape="true">
      <arg value="commit"/>
      <arg value="--quiet"/>
      <arg value="-m"/>
      <arg value="${deploy.commitMsg}"/>
    </exec>
  </target>

  <target name="deploy:composer:install" description="Downloads core and contrib to deploy folder." hidden="true">
    <if>
      <equals arg1="${deploy.build-dependencies}" arg2="true"/>
      <then>
        <echo>Rebuilding composer dependencies without require-dev.</echo>
        <delete dir="${deploy.dir}/vendor" quiet="true"/>
        <copy todir="${deploy.dir}" overwrite="true">
          <fileset dir="${repo.root}">
            <include name="composer.json"/>
            <include name="composer.lock"/>
          </fileset>
        </copy>
        <exec dir="${deploy.dir}" command="composer install --no-dev --no-interaction --optimize-autoloader" logoutput="true" checkreturn="true" level="${blt.exec_level}" passthru="true"/>
      </then>
      <else>
        <echo>Dependencies will not be built because deploy.build-dependencies is not enabled.</echo>
        <echo>You should define a custom deploy.exclude_file to ensure that dependecies are copied from the root repository.</echo>
      </else>
    </if>

  </target>

  <target name="deploy:copy:site:perms-writable" description="Make each multisite dir writable." hidden="true">
    <!-- Make sites/${multisite.name} writable so that we can copy files. -->
    <chmod file="${docroot}/sites/${multisite.name}" mode="0777" />
  </target>

  <target name="deploy:copy:site:perms-unwritable" description="Make each multisite dir unwritable." hidden="true">
    <!-- Set sites/${multisite.name} back to 755 permissions. -->
    <chmod file="${docroot}/sites/${multisite.name}" mode="0755" />
  </target>

  <target name="deploy:copy" description="Copy required files from each /docroot/sites to /deploy/docroot/sites." hidden="true">
    <property name="deploy.exclusions" value="${deploy.exclude_file}"/>
    <!-- Check for existence of the exclude_additions_file. -->
    <if>
      <available file="${deploy.exclude_additions_file}"/>
      <then>
        <echo>Combining exclusions from deploy-exclude-additions and deploy-exclude files...</echo>
        <exec dir="${repo.root}" command="${composer.bin}/blt-console text:munge ${deploy.exclude_file} ${deploy.exclude_additions_file} > ${deploy.exclude_file}.tmp" logoutput="true" checkreturn="true" level="${blt.exec_level}"/>
        <property name="deploy.exclusions" value="${deploy.exclude_file}.tmp" override="true"/>
      </then>
    </if>
    <foreach list="${multisite.name}" param="multisite.name" target="deploy:copy:site:perms-writable"/>
    <exec dir="${repo.root}" command="rsync -a --no-g --delete --delete-excluded --exclude-from=${deploy.exclusions} ${repo.root}/ ${deploy.dir}/ --filter 'protect /.git/'" logoutput="true" checkreturn="true" level="${blt.exec_level}" passthru="true"/>
    <if>
      <available file="${deploy.exclude_file}.tmp"/>
      <then>
        <!-- Get rid of the temporary file we created. -->
        <exec dir="${repo.root}" command="rm ${deploy.exclude_file}.tmp" logoutput="true" checkreturn="true" level="${blt.exec_level}" passthru="true"/>
      </then>
    </if>
    <foreach list="${multisite.name}" param="multisite.name" target="deploy:copy:site:perms-unwritable"/>

    <!-- Use our own .gitignore -->
    <copy file="${deploy.gitignore_file}" tofile="${deploy.dir}/.gitignore" overwrite="true"/>
  </target>

  <target name="deploy:prepare-dir" description="Delete the existing deploy directory and re-initialize as an empty git repository." hidden="true">
    <delete dir="${deploy.dir}" failonerror="false" quiet="true" />
    <exec command="git init ${deploy.dir}" logoutput="true" checkreturn="true" level="${blt.exec_level}" passthru="false"/>
    <exec dir="${deploy.dir}" command="git config --local core.excludesfile false" logoutput="true" checkreturn="true" level="${blt.exec_level}" passthru="true"/>
    <echo>Global .gitignore file is being disabled for this repository to prevent unexpected behavior.</echo>
    <!-- Add the git username and email if necessary. -->
    <if>
      <and>
        <isset property="git.user.name"/>
        <isset property="git.user.email"/>
      </and>
      <then>
        <exec dir="${deploy.dir}" command="git config --local --add user.email '${git.user.email}'" logoutput="true" checkreturn="true" level="${blt.exec_level}" passthru="true"/>
        <exec dir="${deploy.dir}" command="git config --local --add user.name '${git.user.name}'" logoutput="true" checkreturn="true" level="${blt.exec_level}" passthru="true"/>
      </then>
    </if>

  </target>

  <target name="deploy:push-all" hidden="true">
    <foreach list="${git.remotes}" param="deploy.remote" target="deploy:push-remote"/>
    <!--Allow custom commands to be run after deploy.-->
    <phingcall target="target-hook:invoke">
      <property name="hook-name" value="post-deploy"/>
    </phingcall>
  </target>

  <target name="deploy:push-remote" description="Pushes to a git remote." hidden="true">
    <exec command="echo ${deploy.remote} | openssl md5 | cut -d' ' -f 2" outputProperty="remoteName"/>
    <if>
      <isset property="deploy.tag"/>
      <then>
        <exec command="git push ${remoteName} ${deploy.tag}" dir="${deploy.dir}" outputProperty="deploy.push.output" logoutput="true" checkreturn="true" level="${blt.exec_level}"/>
      </then>
      <else>
        <exec command="git push ${remoteName} ${deploy.branch}" dir="${deploy.dir}" outputProperty="deploy.push.output" logoutput="true" checkreturn="true" level="${blt.exec_level}"/>
      </else>
    </if>
    <exec command="export DEPLOY_UPTODATE=$(echo '${deploy.push.output}' | grep --quiet 'Everything up-to-date')" logoutput="true" checkreturn="true" level="${blt.exec_level}" passthru="true"/>
  </target>

  <target name="deploy:sanitize" description="Removes sensitive files from the deploy docroot." hidden="true">
    <exec command="find . -type d | grep '\.git' | xargs rm -rf" dir="${deploy.dir}/docroot" logoutput="true" checkreturn="true" level="${blt.exec_level}" passthru="true"/>
    <exec command="find . -type d | grep '\.git' | xargs rm -rf" dir="${deploy.dir}/vendor" logoutput="true" checkreturn="true" level="${blt.exec_level}" passthru="true"/>
    <delete>
      <fileset dir="${deploy.dir}/docroot">
        <include name="core/*.txt"/>
        <include name="**/CHANGELOG.txt"/>
      </fileset>
    </delete>
  </target>

  <!-- Wrapper for setup:update that sets some environment-specific variables first. -->
  <target name="deploy:update" description="Update current database to reflect the state of the Drupal file system; uses local drush alias.">
    <foreach list="${multisite.name}" param="deploy.site.name" target="deploy:update:site"/>
  </target>

  <target name="deploy:update:site" description="Update current database to reflect the state of the Drupal file system; uses local drush alias.">
    <echo>Deploying updates to ${deploy.site.name}</echo>
    <phingcall target="setup:update">
      <!-- Drush fails to include some files. @see https://github.com/drush-ops/drush/issues/2497#issuecomment-279049111 -->
      <property name="drush.bin" value="${drush.bin} --include=../drush" override="true" />
      <!-- Environment parameter is used to determine which modules to toggle. On ACE, will be overridden by one of dev/stage/prod via cloud hooks. -->
      <param name="environment" value="deploy"/>
      <!-- Disable alias since we are targeting specific uri. -->
      <property name="drush.alias" value=""/>
      <!-- Set uri to this specific multisite. -->
      <property name="drush.uri" value="${deploy.site.name}"/>
      <!-- Most sites store their version-controlled configuration in /config/default. -->
      <!-- ACE internally sets the vcs configuration directory to /config/default, so we use that. -->
      <property name="cm.core.key" value="${cm.core.deploy-key}"/>
    </phingcall>
    <echo>Finished deploying updates to ${deploy.site.name}</echo>
  </target>

  <target name="deploy:tag" description="Tag repository.">
    <!-- Tag build repo with [tag]. -->
    <exec dir="${deploy.dir}" command="git tag -a ${deploy.tag} -m '${deploy.commitMsg}'" logoutput="true" level="${blt.exec_level}" passthru="true"/>
  </target>

  <target name="deploy:drupal:install"
          description="Installs a specific Drupal site."
          depends="drupal:install, deploy:update" />
</project>
