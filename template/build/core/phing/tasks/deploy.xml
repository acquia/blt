<project name="deploy" default="deploy:artifact">

  <target name="deploy:artifact" description="Builds separate artifact and pushes to git.remotes defined project.yml.">

    <!-- Check necessary runtime parameters. -->
    <if>
      <or>
        <not><isset property="deploy.commitMsg"/></not>
        <not><isset property="deploy.branch"/></not>
      </or>
      <then>
        <fail message="You must pass deploy.commitMsg and deploy.branch as runtime parameters."/>
        <echo message="Command should match syntax:"/>
        <echo message="./blt.sh deploy:artifact -Ddeploy.commitMsg='BLT-123: The commit message.' -Ddeploy.branch='master-build'"/>
      </then>
    </if>

    <!-- Delete the existing deploy directory and re-initialize as an empty git repository. -->
    <phingcall target="deploy:artifact:prepare-dir"/>

    <!-- Add remotes and fetch upstream refs. Checkout local branch tracking
     tracking upstream branch, if it exists. Otherwise create new branch
     locally. -->
    <phingcall target="deploy:artifact:add-remotes"/>

    <!-- Build artifact and commit locally. -->
    <phingcall target="deploy:artifact:build"/>
    <phingcall target="deploy:artifact:commit"/>

    <!-- Push up changes to remotes if this is not a dry run.-->
    <if>
      <not><isset property="deploy.dryRun"/></not>
      <then>
        <phingcall target="deploy:artifact:push-all"/>
      </then>
    </if>
  </target>

  <target name="deploy:artifact:remote:add" description="Adds a git remote and checks out deploy branch from upstream.">
    <echo message="Fetching from git remote ${deploy.remote}"/>

    <!-- Generate an md5 sum of the remote URL to use as remote name. -->
    <exec command="echo ${deploy.remote} | openssl md5 | cut -d' ' -f 2" outputProperty="remoteName" checkreturn="true"/>
    <exec command="git remote add ${remoteName} ${deploy.remote}" dir="${deploy.dir}" logoutput="true" passthru="true" checkreturn="true"/>

    <!-- @todo Only call this for the first remote. -->
    <phingcall target="deploy:artifact:remote:pull" />
  </target>

  <target name="deploy:artifact:remote:pull" description="Checks out deploy branch from upstream remote.">
    <exec command="git fetch ${remoteName} ${deploy.branch}" dir="${deploy.dir}" logoutput="true" passthru="true"/>

    <!-- Create the new branch, "[source-branch-name]-build". -->
    <exec command="git checkout -b ${deploy.branch}" dir="${deploy.dir}" logoutput="true" passthru="true" checkreturn="true"/>

    <!-- Pull the latest updates (if available). -->
    <exec command="git merge ${remoteName}/${deploy.branch}" dir="${deploy.dir}" logoutput="true" passthru="true"/>
  </target>

  <target name="deploy:artifact:add-remotes" description="Add remotes and fetch upstream refs.">
    <foreach list="${git.remotes}" param="deploy.remote" target="deploy:artifact:remote:add"/>
  </target>

  <target name="deploy:artifact:build" description="Generates a deploy-ready build in deploy.dir."
          depends="deploy:artifact:clean, deploy:artifact:copy, deploy:artifact:composer:install, deploy:artifact:profile:make, frontend:build, deploy:artifact:sanitize">
    <!-- If we are using ACSF, run the ACSF Deploy command. -->
    <if>
      <equals arg1="${hosting}" arg2="acsf"/>
      <then>
        <phingcall target="deploy:acsf:init"/>
      </then>
    </if>
  </target>

  <target name="deploy:artifact:clean" description="Deletes the contents of the deploy dir.">
    <delete dir="${deploy.dir}/config" failonerror="false" quiet="true" />
    <delete dir="${deploy.dir}/docroot" failonerror="false" quiet="true" />
    <delete dir="${deploy.dir}/hooks" failonerror="false" quiet="true" />
    <delete dir="${deploy.dir}/factory-hooks" failonerror="false" quiet="true" />
    <delete dir="${deploy.dir}/patches" failonerror="false" quiet="true" />
    <delete dir="${deploy.dir}/vendor" failonerror="false" quiet="true" />
  </target>

  <target name="deploy:artifact:commit">
    <!-- We make these commands quiet because they can cause the output to be so long that Travis CI stops logging. -->
    <exec command="git add -A" dir="${deploy.dir}" logoutput="true" passthru="true" checkreturn="true"/>
    <exec command="git commit -m '${deploy.commitMsg}' --quiet" dir="${deploy.dir}" logoutput="true" passthru="true" checkreturn="true"/>
  </target>

  <target name="deploy:artifact:composer:install" description="Downloads core and contrib to deploy folder.">
    <delete dir="${deploy.dir}/vendor"/>
    <copy todir="${deploy.dir}" overwrite="true">
      <fileset dir="${repo.root}">
        <include name="composer.json"/>
        <include name="composer.lock"/>
      </fileset>
    </copy>
    <exec dir="${deploy.dir}" command="composer install --no-dev --prefer-dist --no-interaction" passthru="true" logoutput="true" checkreturn="true"/>
  </target>

  <target name="deploy:artifact:profile:make" description="Build a subsidiary makefile shipped with profile.">
    <if>
      <equals arg1="${project.profile.contrib}" arg2="true"/>
      <then>
        <echo message="Building make file for ${project.profile.name}"/>
        <property name="profile.dir" value="${deploy.dir}/docroot/profiles/contrib/${project.profile.name}"/>
        <drush command="make" assume="yes" verbose="TRUE">
          <param>"${profile.dir}/drupal-org.make"</param>
          <param>"${profile.dir}"</param>
          <option name="no-core"></option>
        </drush>
      </then>
    </if>
  </target>

  <target name="deploy:artifact:copy" description="Copy required files from /docroot/sites to /deploy/docroot/sites.">
    <!-- Make sites/default writable so that we can copy files. -->
    <!-- @todo Support multisite. -->
    <chmod file="${docroot}/sites/default" mode="0777" />

    <!-- Copy required files from docroot. -->
    <copy todir="${deploy.dir}/docroot" overwrite="true">
      <fileset dir="${docroot}" defaultexcludes="false">
        <!-- This should be similar to .gitigore. -->
        <!-- We remove default excludes because they include .gitignore files we need, like the ACSF one. -->
        <include name="**" />
        <exclude name="**/local.*" />
        <exclude name=".gitkeep" />
        <exclude name=".DS_STORE" />
        <exclude name="core/**" />
        <exclude name="drush/contrib/**" />
        <exclude name="example.gitignore" />
        <exclude name="vendor/**" />
        <exclude name="sites/**/files/**" />
        <exclude name="sites/**/private/**" />
        <exclude name="themes/contrib/**" />
        <exclude name="profiles/contrib/**" />
        <exclude name="modules/contrib/**" />
        <exclude name="**/node_modules/**" />
        <exclude name="**/bower_components/**" />
      </fileset>
    </copy>

    <!-- Copy Acquia Cloud hooks. -->
    <copy todir="${deploy.dir}/hooks" overwrite="true">
      <fileset dir="${repo.root}/hooks"/>
    </copy>

    <copy todir="${deploy.dir}/factory-hooks" overwrite="true" haltonerror="false">
      <fileset dir="${repo.root}/factory-hooks"/>
    </copy>

    <!-- Copy configuration. -->
    <copy todir="${deploy.dir}/config" overwrite="true">
      <fileset dir="${repo.root}/config"/>
    </copy>

    <!-- Copy local patches. -->
    <copy todir="${deploy.dir}/patches" overwrite="true">
      <fileset dir="${repo.root}/patches"/>
    </copy>

    <!-- Use our own .gitignore -->
    <copy file="${repo.root}/build/core/files/.gitignore" tofile="${deploy.dir}/docroot/.gitignore" overwrite="true"/>

    <!-- Set sites/default back to 755 permissions. -->
    <!-- @todo Support multisite. -->
    <chmod file="${docroot}/sites/default" mode="0755" />
  </target>

  <target name="deploy:artifact:prepare-dir" description="Delete the existing deploy directory and re-initialize as an empty git repository.">
    <delete dir="${deploy.dir}" failonerror="false" quiet="true" />
    <exec command="git init ${deploy.dir}" logoutput="true" checkreturn="true"/>
  </target>

  <target name="deploy:artifact:push-all">
    <foreach list="${git.remotes}" param="deploy.remote" target="deploy:artifact:push-remote"/>
  </target>

  <target name="deploy:artifact:push-remote" description="Pushes to a git remote.">
    <exec command="echo ${deploy.remote} | openssl md5 | cut -d' ' -f 2" outputProperty="remoteName"/>
    <exec command="git push ${remoteName} ${deploy.branch}" dir="${deploy.dir}" logoutput="true" outputProperty="deploy.push.output"/>
    <exec command="export DEPLOY_UPTODATE=$(echo '${deploy.push.output}' | grep --quiet 'Everything up-to-date')"/>
  </target>

  <target name="deploy:artifact:sanitize" description="Removes sensitive files from the deploy docroot.">
    <exec command="find . -type d | grep .git | xargs rm -rf" dir="${deploy.dir}/docroot"/>
    <exec command="find . -type d | grep .git | xargs rm -rf" dir="${deploy.dir}/vendor"/>
    <delete>
      <fileset dir="${deploy.dir}/docroot">
        <include name="core/*.txt"/>
        <include name="**/CHANGELOG.txt"/>
      </fileset>
    </delete>
  </target>

  <target name="deploy:acsf:init" description="Re-initialize ACSF with the settings.php changes required for artifact.">
    <chmod file="${deploy.dir}/docroot/sites/default/settings.php" mode="0755" />
    <exec dir="${deploy.dir}/docroot" command="${drush.bin} --include=${deploy.dir}/docroot/modules/contrib/acsf/acsf_init acsf-init -r ${deploy.dir}/docroot -y" logoutput="true" checkreturn="true"/>
  </target>
</project>
