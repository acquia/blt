<project name="setup" default="setup">

  <target name="setup" description="Install dependencies, builds docroot, installs Drupal."
          depends="setup:build:all, setup:drupal:install, blt:alias">
    <echo>For a full list of available Phing targets, run:</echo>
    <echo>./blt.sh -l</echo>
    <echo></echo>
  </target>

  <target name="setup:behat" description="Generates tests/behat/local.yml file for executing Behat tests locally.">
    <copy file="${repo.root}/tests/behat/example.local.yml" tofile="${repo.root}/tests/behat/local.yml">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
  </target>

  <!-- This is run when a project is cloned to a new environment. -->
  <target name="setup:build:all" description="Generates all required files for a full build. E.g., (re)builds docroot, etc."
          depends="setup:git-hooks, setup:drupal:settings, setup:behat, setup:composer:install, setup:build:profile, frontend:build">
  </target>

  <target name="setup:build:profile" description="Build a subsidiary makefile shipped with profile">
    <if>
      <equals arg1="${project.profile.contrib}" arg2="true"/>
      <then>
        <echo message="Building make file for ${project.profile.name}"/>
        <property name="profile.dir" value="${docroot}/profiles/contrib/${project.profile.name}"/>
        <drush command="make" assume="yes" verbose="TRUE">
          <option name="no-core"></option>
          <param>"${profile.dir}/drupal-org.make"</param>
          <param>${profile.dir}</param>
        </drush>
      </then>
    </if>
  </target>

  <target name="setup:clean" description="Removes .gitignored files and directories.">
    <delete>
      <fileset dir="${repo.root}">
        <include name="docroot/core"/>
        <include name="docroot/libraries"/>
        <include name="docroot/modules/contrib"/>
        <include name="docroot/profiles/contrib"/>
        <include name="docroot/themes/contrib"/>
        <include name="drush/contrib"/>
        <include name="vendor"/>
      </fileset>
    </delete>
  </target>

  <target name="setup:composer:install" description="Installs project dependencies, including drupal core and contrib.">
    <exec dir="${repo.root}" command="composer install" logoutput="true" passthru="true"/>
  </target>

  <target name="setup:drupal:settings" description="Create local settings files using default settings files.">
    <chmod mode="0755" file="${docroot}/sites/default" failonerror="false" verbose="true"/>
    <copy file="${docroot}/sites/${multisite.name}/settings/default.local.settings.php" tofile="${docroot}/sites/${multisite.name}/settings/local.settings.php"/>
    <copy file="${docroot}/sites/${multisite.name}/default.local.drushrc.php" tofile="${docroot}/sites/${multisite.name}/local.drushrc.php">
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
    <!-- Re-extract value of $options['uri'] in case it was not yet set. -->
    <!-- @todo Add multisite support. -->
    <phpVariable file="${repo.root}/drush/drushrc.php" variable="options[uri]" outputProperty="local_url" />
  </target>

  <target name="setup:drupal:install"
          description="Installs a specific Drupal site."
          depends="setup:drupal:settings">

    <drush command="site-install" assume="yes" verbose="TRUE" alias="${drush.alias}">
      <option name="site-name">"${project.human_name}"</option>
      <option name="site-mail">"${drupal.account.mail}"</option>
      <option name="account-name">"${drupal.account.name}"</option>
      <option name="account-pass">"${drupal.account.password}"</option>
      <option name="account-mail">"${drupal.account.mail}"</option>
      <option name="l">"${multisite.name}"</option>
      <param>"${project.profile.name}"</param>
      <param>"install_configure_form.update_status_module='array(FALSE,FALSE)'"</param>
    </drush>

    <drush command="config-import" assume="yes" alias="${drush.alias}">
      <option name="partial"></option>
      <param>sync</param>
    </drush>

    <!-- Grant execution permissions. -->
    <chmod mode="0755" failonerror="false">
      <fileset dir="${docroot}/sites/default">
        <include name="**" />
      </fileset>
    </chmod>

  </target>

  <target name="setup:git-hooks" description="Installs git hooks to local .git/hooks directory from version controlled scripts/git-hooks directory.">
    <!-- Symlink into .git directory. -->
    <delete dir="${repo.root}/.git/hooks" quiet="true" failonerror="false"/>
    <exec dir="${repo.root}/.git" command="ln -snv ../scripts/git-hooks hooks" logoutput="true"/>

    <!-- Grant execution permissions. -->
    <chmod mode="0755">
      <fileset dir="${repo.root}/scripts/git-hooks">
        <exclude name="**/*.sample" />
        <exclude name="**/README.md" />
      </fileset>
    </chmod>
  </target>

  <target name="setup:update" description="Update current database to reflect the state of the Drupal file system.">
    <!-- Execute db updates. -->
    <drush command="updb" assume="yes" alias="${drush.alias}">
      <option name="entity-updates"></option>
    </drush>
    <!-- Import configuration. -->
    <drush command="config-import" assume="yes" alias="${drush.alias}">
      <option name="partial"></option>
    </drush>
    <!-- Enable features module. -->
    <drush command="en" assume="yes" alias="${drush.alias}">
      <param>features</param>
    </drush>
    <!-- Clear drush caches to register features drush commands. -->
    <drush command="cc" assume="yes" alias="${drush.alias}">
      <param>drush</param>
    </drush>
    <!-- Revert all features. -->
    <drush command="fra" assume="yes" alias="${drush.alias}"/>
    <!-- Rebuild caches. -->
    <drush command="cr" alias="${drush.alias}"/>
  </target>

</project>
